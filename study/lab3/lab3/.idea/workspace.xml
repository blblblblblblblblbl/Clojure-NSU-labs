<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="0c575f36-0b7f-4265-823d-30fb384b0456" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/lab3/lab31.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/lab3/lab31.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/lab3/lab32.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/lab3/lab32.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../../.." />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2FnsNuwsXRdtTPSoEXX25JnApKZ" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;cursive.last.file.extension.C\\:/Users/stitc/Documents/GitHub/clojure/study/lab3/lab3/src&quot;: &quot;clj&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/stitc/Documents/GitHub/clojure/study/lab3/lab3&quot;
  }
}</component>
  <component name="ReplState" timestamp="1671599189818">{:repl-history {:ide [], :local [{:command &quot;(take 10 (iterate inc 0))&quot;, :offset 25, :ns &quot;lab3.lab32draft&quot;} {:command &quot;(take 3 (parallel-filter even? [1 2 3 4] 2))&quot;, :offset 44, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4] 2))))&quot;, :offset 59, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4] 2 1))))&quot;, :offset 61, :ns &quot;lab3.lab32&quot;} {:command &quot;(parts 2 [1 2 3 4])&quot;, :offset 19, :ns &quot;lab3.lab32&quot;} {:command &quot;(parts 2 (iterate inc 0))&quot;, :offset 25, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 3 [1 2 3 4]))&quot;, :offset 28, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2(parts 2 [1 2 3 4])))&quot;, :offset 37, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 2 (filter heavy-even? (iterate inc 0)))))&quot;, :offset 60, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4] 10))))&quot;, :offset 60, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter-chunk [func coll chunk-size batch-size]\n  (-&gt;&gt;(parts chunk-size coll )\n      (parts batch-size)\n      (mapcat (fn [batch]\n             (-&gt;&gt; (map #(future (doall(filter func %))) batch)\n                  ;(doall batch-size)\n                  (map deref))))\n      (apply concat)\n      ))&quot;, :offset 307, :ns &quot;lab3.lab32&quot;} {:command &quot;(time  (take 4 (parallel-filter even? [1 2 3 4] 10)))&quot;, :offset 53, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter-chunk [func coll chunk-size batch-size]\n  (-&gt;&gt;(parts chunk-size coll )\n      (parts batch-size)\n      (mapcat (fn [batch]\n             (-&gt;&gt; (map #(future (doall(filter func %))) batch)\n                  (doall batch-size)\n                  (map deref))))\n      (apply concat)\n      ))&quot;, :offset 306, :ns &quot;lab3.lab32&quot;} {:command &quot;(time  (take 4 (parallel-filter even? (take 4 [1 2 3 4]) 10)))&quot;, :offset 62, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? (take 4 [1 2 3 4]) 10))))&quot;, :offset 69, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? (filter even? [1 2 3 4]) 10))))&quot;, :offset 75, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? (iterate inc 0) 10))))&quot;, :offset 66, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 3 (parts 2(parts 2 [1 2 3 4])))&quot;, :offset 37, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2[1 2 3 4]))&quot;, :offset 27, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2 [1 2 3 4]))&quot;, :offset 28, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2 (iterate inc 0)))&quot;, :offset 34, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? (filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]) 10))))&quot;, :offset 109, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? (filter even? [1 2 3 4 ]) 10))))&quot;, :offset 76, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 ] 10))))&quot;, :offset 61, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] 10))))&quot;, :offset 94, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5] 10))))&quot;, :offset 62, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 ] 10))))&quot;, :offset 65, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13] 10))))&quot;, :offset 82, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12] 10))))&quot;, :offset 79, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11] 10))))&quot;, :offset 76, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10] 10))))&quot;, :offset 73, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9] 10))))&quot;, :offset 70, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8] 10))))&quot;, :offset 68, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7] 10))))&quot;, :offset 66, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7] 1))))&quot;, :offset 65, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] 10 1))))&quot;, :offset 96, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] 10 5))))&quot;, :offset 96, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] 10 10))))&quot;, :offset 97, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2 [0 1 2 3 4 5 6 7 8]))&quot;, :offset 38, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 2 [0 1 2 3 4 5 6 7]))&quot;, :offset 36, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7] 10 1))))&quot;, :offset 68, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 10 [0 1 2 3 4 5 6 7]))&quot;, :offset 37, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 1 (parts 10 [0 1 2 3 4 5 6 7])))&quot;, :offset 47, :ns &quot;lab3.lab32&quot;} {:command &quot;(take 4 (parts 1 (parts 10 [0 1 2 3 4 5 6 7 8 ])))&quot;, :offset 50, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 8] 10 1))))&quot;, :offset 70, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 9] 10 1))))&quot;, :offset 70, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 4 (parallel-filter even? [1 2 3 4 5 6 7 9 10] 10 1))))&quot;, :offset 73, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4 5 6 7 8] 10 1))))&quot;, :offset 70, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4 5 6 7] 10 1))))&quot;, :offset 68, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4 5 ] 10 1))))&quot;, :offset 65, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (take 3 (parallel-filter even? [1 2 3 4 5 ] 10 1)))&quot;, :offset 57, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 3 (parallel-filter even? [1 2 3 4 5 6] 10 1))))&quot;, :offset 66, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (take 3 (parallel-filter even? [1 2 3 4 5 6] 10 1)))&quot;, :offset 58, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (parallel-filter even? [1 2 3 4 5 6] 10 1)))&quot;, :offset 57, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter-chunk [func coll chunk-size batch-size]\n  (-&gt;&gt;(parts chunk-size coll )\n      (parts batch-size)\n      (mapcat (fn [batch]\n             (-&gt;&gt; (mapcat #(future (doall(filter func %))) batch)\n                  (doall batch-size)\n                  (map deref))))\n      ;(apply concat)\n      ))&quot;, :offset 310, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parts [n coll]\n  (map (partial take n) (iterate (partial drop n) coll)))&quot;, :offset 78, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter-chunk [func coll chunk-size batch-size]\n  (-&gt;&gt;(parts chunk-size coll )\n      (parts batch-size)\n      (mapcat (fn [batch]\n             (-&gt;&gt; (mapcat #(future (doall(filter func %))) batch)\n                  (doall batch-size)\n                  (map deref)))) \n      (apply concat)\n      ))&quot;, :offset 310, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter\n  ([func coll chunk-size ] (parallel-filter-chunk func coll chunk-size (.. Runtime (getRuntime) (availableProcessors)) ))\n  ([func coll chunk-size threads] (parallel-filter-chunk func coll chunk-size threads )))&quot;, :offset 233, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 30 (filter heavy-even? (iterate inc 0)))))&quot;, :offset 61, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 50 (parallel-filter heavy-even? (iterate inc 0) 10))))&quot;, :offset 73, :ns &quot;lab3.lab32&quot;} {:command &quot;(ns lab3.lab32)&quot;, :offset 15, :ns &quot;lab3.core&quot;} {:command &quot;(defn parts [n coll]\n      (when (not-empty coll)\n        (lazy-seq\n          (cons (take n coll)\n                (parts n (drop n coll))\n                    ))))&quot;, :offset 162, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn my-parallel-filter [func coll chunk-size threads]\n  (mapcat deref\n          (mapcat\n            #(doall (map (fn [x] (future (doall (filter func x)))) %))\n            (map #(parts chunk-size %)\n                 (parts (* threads chunk-size) coll)\n                 )\n            ))\n  )&quot;, :offset 290, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn parallel-filter\n  ([func coll chunk-size ] (my-parallel-filter func coll chunk-size (.. Runtime (getRuntime) (availableProcessors)) ))\n  ([func coll chunk-size threads] (my-parallel-filter func coll chunk-size threads )))&quot;, :offset 227, :ns &quot;lab3.lab32&quot;} {:command &quot;(defn heavy-even? [x]\n  (Thread/sleep 100)\n  (even? x))&quot;, :offset 55, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 50 (parallel-filter heavy-even? (iterate inc 0) 10 10))))&quot;, :offset 76, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 5 (my-parallel-filter heavy-even? (list 1 2 3 4 5 6 7) 5 6))))&quot;, :offset 81, :ns &quot;lab3.lab32&quot;} {:command &quot;(time (doall (take 50 (my-parallel-filter heavy-even? (list 1 2 3 4 5 6 7) 5 6))))&quot;, :offset 82, :ns &quot;lab3.lab32&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL for lab3">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="REPL for lab3" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="lab3" />
      <setting name="displayName" value="REPL for lab3" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="lab3.lab31" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="lab3" />
      <setting name="path" value="" />
      <setting name="namespace" value="lab3.lab31" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="lab3.lab32" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="lab3" />
      <setting name="path" value="" />
      <setting name="namespace" value="lab3.lab32" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for lab3" />
        <item itemvalue="Clojure Application.lab3.lab31" />
        <item itemvalue="Clojure Application.lab3.lab32" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="0c575f36-0b7f-4265-823d-30fb384b0456" name="Changes" comment="" />
      <created>1665139147632</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1665139147632</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>